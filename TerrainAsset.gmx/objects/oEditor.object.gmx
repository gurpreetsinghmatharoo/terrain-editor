<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///constants
//colors
global.colorMap = ds_map_create();

global.colorMap[? "yellow"] = c_yellow;
global.colorMap[? "red"] = c_red;
global.colorMap[? "blue"] = c_blue;

//layer properties enum
enum pr{
    num, //Priority of layer
    color, //Color
    tex //Texture
}

//textures list
global.texList = ds_list_create();

ds_list_add(global.texList, sTexDirt, sTexGrass);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
//options
    //controls

//properties
    //draw
    brushSize = 16;
    brushColour = c_yellow;
    
    //controls
    panSpeed = 1;
    panKey = vk_space;
    playKey = ord("P");
    
    //ui
    uiBackC = $AABBBB;
    
//other
application_surface_draw_enable(false);

//states
global.playing = false; //testing level or not
global.editing = false; //editing a textbox or not
curLayer = 0;

global.saveFile = "terrain";

global.surfCleared = false; //whether the surfaces were cleared intentionally

//vars
mouse_xx = mouse_x;
mouse_yy = mouse_y;

//properties
room_width = 1024;
room_height = 960;

draw_set_font(ftUI);

//interface
    globalvar panelW, panelH, layerUIX, layerUIY, layerUIH;
    panelH = 128;
    panelW = 128;
    
    //layer buttons
    layerUIX = 16;
    layerUIY = panelH + 48;
    layerUIH = 48;

//view
globalvar view_scale, viewX, viewY, viewW, viewH, portW, portH, winW, winH;
view_scale = 1;

viewX = 0;
viewY = 0;

viewW = 960;
viewH = 540;

portW = viewW*view_scale;
portH = viewH*view_scale;

//window
winW = panelW + portW;
winH = panelH + portH;

window_set_size(winW, winH);
display_set_gui_maximise();
//display_set_gui_size(winW, winH);

//terrain surface
var _surf = surface_create_clear(room_width, room_height);

//layers
layersDS = ds_list_create();

ds_list_add(layersDS, _surf);

//spritesDS = ds_list_create();

//ds_list_add(spritesDS, _spr);

//Buffer
bufferArr[0] = buffer_create(4 * room_width * room_height, buffer_grow, 1);
buffer_get_surface(bufferArr[0], _surf, 0, 0, 0);

//layer properties
propsDS = ds_list_create();

ds_list_add(propsDS, arrayC(0, c_white, sTexDirt));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create UI
//add layer button
createUI(96, layerUIY-32, oUIAddLayer);

//layer buttons
for(var i=0; i&lt;ds_list_size(layersDS); i++){
    var lrB = createUI(layerUIX, layerUIY + (layerUIH*i), oUILayer);
    lrB.layerID = i;
}

//test textbox for brush size
//Was just for test, will create a slider for this
//var bsTB = createUI(8, 8, oUITextbox);
//bsTB.tbType = tb.brushSize;
//bsTB.text = string(brushSize);

//savefile textbox
var sfTB = createUI(8, 8, oUITextbox);
sfTB.tbType = tb.saveFile;
sfTB.text = global.saveFile;

//save/load buttons
var svB = createUI(80, 8, oUISave);
var ldB = createUI(120, 8, oUILoad);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set editing state
global.editing = false;

with(oUITextbox){
    if (typing){
        global.editing = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintain layer buttons

with(oUILayer){
    //Maintain position
    
    var lrNum = getProp(layerID, pr.num);
    
    UISetPos(id, layerUIX, layerUIY + (layerUIH*lrNum));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step functions
mouse_input();

//hotkeys
if (keyboard_check_pressed(ord("R"))){
    room_restart();
}

//pan
if (mouse_check_button(mb_middle) || keyboard_check(panKey)){
    var mouseDX = mouse_xx - mouseX;
    var mouseDY = mouse_yy - mouseY;
    
    viewX = clamp(viewX + (mouseDX*panSpeed), 0, room_width-viewW);
    viewY = clamp(viewY + (mouseDY*panSpeed), 0, room_height-viewH);
}

//play
if (keyboard_check_pressed(playKey) &amp;&amp; !global.editing){
    global.playing = !global.playing;
    
    //if playing, create terrain instances
    if (global.playing){
        //create terrains
        for(var i=0; i&lt;ds_list_size(layersDS); i++){
            var _surf = layersDS[| i];
            
            terrainInst[i] = instance_create(0, 0, oTerrainLayer);
            
            var spr = sprite_create_from_surface(_surf, 0, 0,
                surface_get_width(_surf), surface_get_height(_surf),
                false, false, 0, 0);
                
            sprite_collision_mask(spr, false, 0, 0, 0, 0, 0, 0, 0);
            terrainInst[i].sprite_index = spr;
            terrainInst[i].mask_index = spr;
            terrainInst[i].depth = getProp(i, pr.num);
        }
        //create player
        instance_create(mouseX, mouseY, oPlayer);
    }
    //if editing, remove terrain instance
    else{
        instance_destroy(oTerrain);
        instance_destroy(oPlayer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///apply previous mouse coords
mouse_xx = mouseX;
mouse_yy = mouseY;

//reset
if (global.surfCleared) global.surfCleared = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surface backup
/*SCRAPPED CODE, WAS STUPID AND USING SPRITES INSTEAD OF BUFFERS/recreate and load surfaces if freed
for(var i=0; i&lt;ds_list_size(layersDS); i++){
    var _surf = layersDS[| i];
    
    if (!surface_exists(_surf)){
        layersDS[| i] = surface_create_clear(room_width, room_height);
        surface_load_sprite(layersDS[| i], spritesDS[| i]);
    }
}

//save surfaces
for(var i=0; i&lt;ds_list_size(layersDS); i++){
    var _surf = layersDS[| i];
    
    spritesDS[| i] = surface_save_sprite(layersDS[| i], spritesDS[| i]);
}*/

//Buffer alternative
//recreate and load surfaces if freed
for(var i=0; i&lt;ds_list_size(layersDS); i++){
    var _surf = layersDS[| i];
    
    if (!surface_exists(_surf) &amp;&amp; buffer_exists(bufferArr[i])){
        layersDS[| i] = surface_create_clear(room_width, room_height);
        buffer_set_surface(bufferArr[i], layersDS[| i], 0, 0, 0);
    }
}

//save surfaces
for(var i=0; i&lt;ds_list_size(layersDS); i++){
    var _surf = layersDS[| i];
    
    buffer_get_surface(bufferArr[i], _surf, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MAIN VIEW SURFACE
var mainSurf = surface_create_clear(portW, portH);
surface_set_target(mainSurf);

//Draw background
draw_background_tiled(sCheck, 0, 0);

//Put objects into priority
var prior = ds_priority_create();

for(var i=0; i&lt;instance_count; i++){
    var inst = instance_id[i];
    if (sprite_exists(inst.sprite_index) &amp;&amp; object_get_parent(inst.object_index)!=oEditorUI)
        ds_priority_add(prior, inst, inst.depth);
}

//Draw objects
while(ds_priority_size(prior)&gt;0){
    var inst = ds_priority_delete_max(prior);

    with(inst){
        draw_sprite_ext(sprite_index, image_index, x-viewX, y-viewY,
            image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
}

ds_priority_destroy(prior);

//Put terrain surfaces into priority
var prior = ds_priority_create();

for(var i=0; i&lt;ds_list_size(layersDS); i++){
    var lrr = layersDS[| i];
    ds_priority_add(prior, lrr, getProp(i, pr.num));
}

//Draw terrain surfaces
if (!global.playing){
    while(ds_priority_size(prior)&gt;0){
        var _surf = ds_priority_delete_max(prior);
        draw_surface_part_ext(_surf, viewX, viewY, viewW, viewH, 0, 0, view_scale, view_scale, -1, 1);
    }
}

ds_priority_destroy(prior);

//Draw debug info
//draw_text(5, 5, "(" + string(window_get_width()) + ", " + string(window_get_height()) + ") / (" + string(winW) + ", " + string(winH) + ")");

surface_reset_target();




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI SURFACE
var uiSurf = surface_create_clear(winW, winH);
surface_set_target(uiSurf);

//Background
draw_set_color(uiBackC);
draw_rectangle(0, 0, winW, panelH, false);
draw_rectangle(0, 0, panelW, winH, false);
draw_set_color(c_white);

//Color for UI fores
draw_set_color(c_black);
draw_set_font(ftUI);

//Layers separator
draw_line(0, panelH, panelW, panelH);

//Layers text
draw_text(32, panelH+16, "Layers");

//Reset color
draw_set_color(c_white);

//Put UI objects into priority
var prior = ds_priority_create();

for(var i=0; i&lt;instance_count; i++){
    var inst = instance_id[i];
    if (sprite_exists(inst.sprite_index) &amp;&amp; object_get_parent(inst.object_index)==oEditorUI)
        ds_priority_add(prior, inst, inst.depth);
}

//UI Objects
while(ds_priority_size(prior)&gt;0){
    var inst = ds_priority_delete_max(prior);

    with(inst){
        draw_sprite_ext(sprite_index, image_index, x+panelW, y+panelH,
            image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            
        //textbox text
        if (object_index==oUITextbox){
            //cursor
            var cursor = "|";
            if (current_time/500 mod 2){
                cursor = "";
            }
            
            var finalText = text;
            if (typing) finalText = text + cursor;
        
            //text
            draw_set_font(ftTextbox);
            draw_set_color(c_black);
            draw_text(x+panelW+2, y+panelH+2, finalText);
            
            draw_set_color(c_white);
        }
        
        //pop up text
        if (object_index==oUITextpop){
            draw_set_color(c_black);
            draw_set_alpha(image_alpha);
            draw_text(x+panelW+16, y+panelH, text);
            draw_set_alpha(1);
            draw_set_color(c_white);
        }
        
        //layer buttons text
        if (object_index==oUILayer || object_index==oUISelectLayer || object_index==oUILayerMove || object_index==oUITexSelect){
            draw_set_color(c_black);
            draw_text(x+panelW, y+panelH-8, layerID);
            draw_set_color(c_white);
        }
    }
}

ds_priority_destroy(prior);

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw surfaces to screen
draw_surface(mainSurf, panelW, panelH);
draw_surface(uiSurf, 0, 0);

//Free memory
surface_free(mainSurf);
surface_free(uiSurf);

/*/Debug
draw_text(5, 32, string(ds_exists(layersDS, ds_type_list)));
//Draw layer info
draw_set_color(c_black);
for(var i=0; i&lt;ds_list_size(layersDS); i++){
    draw_text(5, 50 + (20*i), getProp(i, pr.num));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw to selected terrain surface (layer)
if (!global.playing &amp;&amp; !UIOpen() &amp;&amp; mouseX&gt;0 &amp;&amp; mouseY&gt;0){ //Only if not playing and no UI windows open
    //surface (layer) to draw on
    var _surf = layersDS[| curLayer];
    surface_set_target(_surf);
    
    //left button (draw)
    if (mouseInput &gt; 0){
        var _color = getProp(curLayer, pr.color);
        draw_set_color(_color);
    
        //draw line
        draw_line_circle(mouse_xx, mouse_yy, mouseX, mouseY, brushSize, 4);
        draw_set_color(c_white);
    }
    //right button (erase)
    else if (mouseInput &lt; 0){
        //erase
        draw_set_blend_mode(bm_subtract);
        draw_line_circle(mouse_xx, mouse_yy, mouseX, mouseY, brushSize, 4);
        draw_set_blend_mode(bm_normal);
    }
    
    //reset
    surface_reset_target();
}
 
//texture
overlayTexture();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
